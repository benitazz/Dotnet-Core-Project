// <auto-generated />
using System;
using MedicalEngineMicroService.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MedicalEngineMicroService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190810092921_NappiCodesTable2")]
    partial class NappiCodesTable2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Lookups.FileStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedDescription")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("Id");

                    b.ToTable("FileStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 489, DateTimeKind.Local).AddTicks(889),
                            Description = "Successfully uploaded the file",
                            IsDeleted = false,
                            Name = "Uploaded",
                            NormalizedDescription = "SUCCESSFULLYUPLOADEDTHEFILE",
                            NormalizedName = "UPLOADED",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 490, DateTimeKind.Local).AddTicks(4633)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 490, DateTimeKind.Local).AddTicks(5226),
                            Description = "The manager rejected the file",
                            IsDeleted = false,
                            Name = "Rejected",
                            NormalizedDescription = "THEMANAGERREJECTEDTHEFILE",
                            NormalizedName = "REJECTED",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 490, DateTimeKind.Local).AddTicks(5237)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 490, DateTimeKind.Local).AddTicks(5245),
                            Description = "Ready to submit to the Fund",
                            IsDeleted = false,
                            Name = "Approved",
                            NormalizedDescription = "READYTOSUBMITTOTHEFUND",
                            NormalizedName = "APPROVED",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 490, DateTimeKind.Local).AddTicks(5245)
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 490, DateTimeKind.Local).AddTicks(5249),
                            Description = "File successfully submitted to the Fund",
                            IsDeleted = false,
                            Name = "Submitted",
                            NormalizedDescription = "FILESUCCESSFULLYSUBMITTEDTOTHEFUND",
                            NormalizedName = "SUBMITTED",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 490, DateTimeKind.Local).AddTicks(5252)
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 490, DateTimeKind.Local).AddTicks(5256),
                            Description = "Not all invoices were paid",
                            IsDeleted = false,
                            Name = "Partially Paid",
                            NormalizedDescription = "NOTALLINVOICESWEREPAID",
                            NormalizedName = "PARTIALLY PAID",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 490, DateTimeKind.Local).AddTicks(5256)
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 490, DateTimeKind.Local).AddTicks(5256),
                            Description = "All invoices were successfully paid",
                            IsDeleted = false,
                            Name = "Paid",
                            NormalizedDescription = "ALLINVOICESWERESUCCESSFULLYPAID",
                            NormalizedName = "PAID",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 490, DateTimeKind.Local).AddTicks(5260)
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 490, DateTimeKind.Local).AddTicks(5264),
                            Description = "File Overdue",
                            IsDeleted = false,
                            Name = "Overdue",
                            NormalizedDescription = "FILEOVERDUE",
                            NormalizedName = "OVERDUE",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 490, DateTimeKind.Local).AddTicks(5264)
                        });
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Lookups.InvoiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedDescription")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("Id");

                    b.ToTable("InvoiceStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 494, DateTimeKind.Local).AddTicks(4745),
                            Description = "Pending",
                            IsDeleted = false,
                            Name = "Pending",
                            NormalizedDescription = "PENDING",
                            NormalizedName = "PENDING",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 494, DateTimeKind.Local).AddTicks(4757)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 494, DateTimeKind.Local).AddTicks(4780),
                            Description = "Approved",
                            IsDeleted = false,
                            Name = "Approved",
                            NormalizedDescription = "APPROVED",
                            NormalizedName = "APPROVED",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 494, DateTimeKind.Local).AddTicks(4780)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 494, DateTimeKind.Local).AddTicks(4784),
                            Description = "Payment rejected",
                            IsDeleted = false,
                            Name = "Rejected",
                            NormalizedDescription = "PAYMENTREJECTED",
                            NormalizedName = "REJECTED",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 494, DateTimeKind.Local).AddTicks(4784)
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 494, DateTimeKind.Local).AddTicks(4784),
                            Description = "Invoice submitted to the fund",
                            IsDeleted = false,
                            Name = "Submitted",
                            NormalizedDescription = "INVOICESUBMITTEDTOTHEFUND",
                            NormalizedName = "SUBMITTED",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 494, DateTimeKind.Local).AddTicks(4788)
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 494, DateTimeKind.Local).AddTicks(4788),
                            Description = "Invoice paid",
                            IsDeleted = false,
                            Name = "Paid",
                            NormalizedDescription = "INVOICEPAID",
                            NormalizedName = "PAID",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 494, DateTimeKind.Local).AddTicks(4788)
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 494, DateTimeKind.Local).AddTicks(4792),
                            Description = "Invoice Overdue",
                            IsDeleted = false,
                            Name = "Overdue",
                            NormalizedDescription = "INVOICEOVERDUE",
                            NormalizedName = "OVERDUE",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 494, DateTimeKind.Local).AddTicks(4792)
                        });
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Tariffs.Tariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int>("MedicalItemId");

                    b.Property<double>("RecommendedUnit");

                    b.Property<int>("TariffUnitCostId");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("DATETIME2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("DATETIME2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalItemId");

                    b.HasIndex("TariffUnitCostId");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Tariffs.TariffType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedDescription")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("Id");

                    b.ToTable("TariffTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 496, DateTimeKind.Local).AddTicks(9449),
                            Description = "Coid Tariffs",
                            IsDeleted = false,
                            Name = "Coida",
                            NormalizedDescription = "COIDTARIFFS",
                            NormalizedName = "COIDA",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 496, DateTimeKind.Local).AddTicks(9453)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 496, DateTimeKind.Local).AddTicks(9472),
                            Description = "None Coid Tariffs",
                            IsDeleted = false,
                            Name = "NoneCoid",
                            NormalizedDescription = "NONECOIDTARIFFS",
                            NormalizedName = "NONECOID",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 496, DateTimeKind.Local).AddTicks(9476)
                        });
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Tariffs.TariffUnitCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ActualAmount")
                        .HasColumnType("DECIMAL (19, 4)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime>("ValidTo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("Id");

                    b.ToTable("TariffUnitCosts");
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Tariffs.VatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<double>("Percentage")
                        .HasColumnType("DECIMAL (5, 2)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("Id");

                    b.ToTable("VatTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 501, DateTimeKind.Local).AddTicks(2561),
                            Description = "14% Percent VAT",
                            IsDeleted = false,
                            Percentage = 0.14000000000000001,
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 501, DateTimeKind.Local).AddTicks(2576)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 501, DateTimeKind.Local).AddTicks(2618),
                            Description = "15% Percent VAT",
                            IsDeleted = false,
                            Percentage = 0.14999999999999999,
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 501, DateTimeKind.Local).AddTicks(2622)
                        });
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Tariffs.MedicalItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int>("MedicalItemTypeId");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("Id");

                    b.HasIndex("MedicalItemTypeId");

                    b.ToTable("MedicalItems");
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Tariffs.MedicalItemPublication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int>("MedicalItemId");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<int>("PublicationTypeId");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("Id");

                    b.HasIndex("PublicationTypeId");

                    b.HasIndex("MedicalItemId", "PublicationTypeId")
                        .IsUnique();

                    b.ToTable("MedicalItemPublications");
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Tariffs.MedicalItemPublicationPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int>("MedicalItemPublicationId");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime>("ValiFrom");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("Id");

                    b.HasIndex("MedicalItemPublicationId");

                    b.ToTable("MedicalItemPublicationPeriods");
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Tariffs.MedicalItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("NormalizedDescription")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("Id");

                    b.ToTable("MedicalItemTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 510, DateTimeKind.Local).AddTicks(9063),
                            Description = "Unknown",
                            IsDeleted = false,
                            Name = "-",
                            NormalizedDescription = "UNKNOWN",
                            NormalizedName = "-",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 510, DateTimeKind.Local).AddTicks(9086)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 510, DateTimeKind.Local).AddTicks(9113),
                            Description = "Treatment or Procedure Code",
                            IsDeleted = true,
                            Name = "IT",
                            NormalizedDescription = "TREATMENTORPROCEDURECODE",
                            NormalizedName = "IT",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 510, DateTimeKind.Local).AddTicks(9113)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 510, DateTimeKind.Local).AddTicks(9117),
                            Description = "Drug or Pharmaceutical Item (NAPPI)",
                            IsDeleted = true,
                            Name = "ID",
                            NormalizedDescription = "DRUGORPHARMACEUTICALITEM(NAPPI)",
                            NormalizedName = "ID",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 510, DateTimeKind.Local).AddTicks(9117)
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 510, DateTimeKind.Local).AddTicks(9117),
                            Description = "Modifier",
                            IsDeleted = false,
                            Name = "M",
                            NormalizedDescription = "MODIFIER",
                            NormalizedName = "M",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 510, DateTimeKind.Local).AddTicks(9117)
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 510, DateTimeKind.Local).AddTicks(9120),
                            Description = "Rule",
                            IsDeleted = false,
                            Name = "R",
                            NormalizedDescription = "RULE",
                            NormalizedName = "R",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 510, DateTimeKind.Local).AddTicks(9120)
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 510, DateTimeKind.Local).AddTicks(9124),
                            Description = "Note",
                            IsDeleted = false,
                            Name = "N",
                            NormalizedDescription = "NOTE",
                            NormalizedName = "N",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 510, DateTimeKind.Local).AddTicks(9124)
                        });
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Tariffs.NappiCodeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("DosageFrom");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ManufacturerCode");

                    b.Property<string>("NappiCode");

                    b.Property<string>("ProductName");

                    b.Property<int>("ProductPackSize");

                    b.Property<int>("ProductStrength");

                    b.Property<int>("Schedule");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("NappiCodeTypes");
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Tariffs.Practitioner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsMedReportRequired");

                    b.Property<double>("MaxTreatmentDays");

                    b.Property<string>("NRPLPracticeCode");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedDescription")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("PracticeCode");

                    b.Property<int>("PractitionerGroupTypeId");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("Id");

                    b.HasIndex("PractitionerGroupTypeId");

                    b.ToTable("Practitioners");
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Tariffs.PractitionerGroupType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedDescription")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("Id");

                    b.ToTable("PractitionerGroupTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 524, DateTimeKind.Local).AddTicks(9282),
                            Description = "ALL discipline",
                            IsDeleted = false,
                            Name = "ALL",
                            NormalizedDescription = "ALL DISCIPLINE",
                            NormalizedName = "ALL",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 524, DateTimeKind.Local).AddTicks(9285)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 524, DateTimeKind.Local).AddTicks(9305),
                            Description = "SPC discipline",
                            IsDeleted = false,
                            Name = "SPC",
                            NormalizedDescription = "SPC DISCIPLINE",
                            NormalizedName = "SPC",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 524, DateTimeKind.Local).AddTicks(9305)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 524, DateTimeKind.Local).AddTicks(9309),
                            Description = "GPH discipline",
                            IsDeleted = false,
                            Name = "GPH",
                            NormalizedDescription = "GPH DISCIPLINE",
                            NormalizedName = "GPH",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 524, DateTimeKind.Local).AddTicks(9309)
                        });
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Tariffs.PractitionerPractitionerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<int>("PractitionerId");

                    b.Property<int>("PractitionerTypeId");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("Id");

                    b.HasIndex("PractitionerId");

                    b.HasIndex("PractitionerTypeId");

                    b.ToTable("PractitionerPractitionerTypes");
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Tariffs.PractitionerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedDescription")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("Id");

                    b.ToTable("PractitionerTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 522, DateTimeKind.Local).AddTicks(4024),
                            Description = "Hospital",
                            IsDeleted = false,
                            Name = "Hospital",
                            NormalizedDescription = "HOSPITAL",
                            NormalizedName = "HOSPITAL",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 522, DateTimeKind.Local).AddTicks(4043)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 522, DateTimeKind.Local).AddTicks(4063),
                            Description = "Dentist",
                            IsDeleted = false,
                            Name = "Dentist",
                            NormalizedDescription = "DENTIST",
                            NormalizedName = "DENTIST",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 522, DateTimeKind.Local).AddTicks(4067)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 522, DateTimeKind.Local).AddTicks(4067),
                            Description = "Ambulance",
                            IsDeleted = false,
                            Name = "Ambulance",
                            NormalizedDescription = "AMBULANCE",
                            NormalizedName = "AMBULANCE",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 522, DateTimeKind.Local).AddTicks(4067)
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 522, DateTimeKind.Local).AddTicks(4070),
                            Description = "Specialist",
                            IsDeleted = false,
                            Name = "Specialist",
                            NormalizedDescription = "SPECIALIST",
                            NormalizedName = "SPECIALIST",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 522, DateTimeKind.Local).AddTicks(4070)
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 522, DateTimeKind.Local).AddTicks(4070),
                            Description = "Anaesthetist",
                            IsDeleted = false,
                            Name = "Anaesthetist",
                            NormalizedDescription = "ANAESTHETIST",
                            NormalizedName = "ANAESTHETIST",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 522, DateTimeKind.Local).AddTicks(4074)
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 522, DateTimeKind.Local).AddTicks(4074),
                            Description = "General Practitioner",
                            IsDeleted = false,
                            Name = "GP",
                            NormalizedDescription = "GENERALPRACTITIONER",
                            NormalizedName = "GP",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 522, DateTimeKind.Local).AddTicks(4074)
                        });
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Tariffs.SectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedDescription")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("SectionNo");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("Id");

                    b.ToTable("SectionTypes");
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Users.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Users.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PracticeNumber");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Users.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PublicationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedDescription")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("PublicationNo")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("Id");

                    b.ToTable("PublicationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 518, DateTimeKind.Local).AddTicks(6459),
                            Description = "Chiropractor Tariffs",
                            IsDeleted = false,
                            Name = "Chiropractor",
                            NormalizedDescription = "CHIROPRACTORTARIFFS",
                            NormalizedName = "CHIROPRACTOR",
                            PublicationNo = "11111",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 518, DateTimeKind.Local).AddTicks(6475)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 518, DateTimeKind.Local).AddTicks(7099),
                            Description = "Radiologists Tariffs",
                            IsDeleted = false,
                            Name = "Radiologist",
                            NormalizedDescription = "RADIOLOGISTSTARIFFS",
                            NormalizedName = "RADIOLOGIST",
                            PublicationNo = "11111",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 518, DateTimeKind.Local).AddTicks(7102)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 518, DateTimeKind.Local).AddTicks(7110),
                            Description = "Dentists tarrifs",
                            IsDeleted = false,
                            Name = "Dentist",
                            NormalizedDescription = "DENTISTSTARRIFS",
                            NormalizedName = "DENTIST",
                            PublicationNo = "11111",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 518, DateTimeKind.Local).AddTicks(7110)
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 518, DateTimeKind.Local).AddTicks(7114),
                            Description = "Physiotherapist tariffs",
                            IsDeleted = false,
                            Name = "Physiotherapist",
                            NormalizedDescription = "PHYSIOTHERAPISTTARIFFS",
                            NormalizedName = "PHYSIOTHERAPIST",
                            PublicationNo = "11111",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 518, DateTimeKind.Local).AddTicks(7114)
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 518, DateTimeKind.Local).AddTicks(7118),
                            Description = "Private Ambulance Tariffs",
                            IsDeleted = false,
                            Name = "Private Ambulance",
                            NormalizedDescription = "PRIVATEAMBULANCETARIFFS",
                            NormalizedName = "PRIVATEAMBULANCE",
                            PublicationNo = "11111",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 518, DateTimeKind.Local).AddTicks(7118)
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 518, DateTimeKind.Local).AddTicks(7118),
                            Description = "General Practioner Tariffs",
                            IsDeleted = false,
                            Name = "General Practioner",
                            NormalizedDescription = "GENERALPRACTIONERTARIFFS",
                            NormalizedName = "GENERALPRACTIONER",
                            PublicationNo = "11111",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 518, DateTimeKind.Local).AddTicks(7122)
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 518, DateTimeKind.Local).AddTicks(7122),
                            Description = "Renal Care Tariffs",
                            IsDeleted = false,
                            Name = "Renal Care",
                            NormalizedDescription = "RENALCARETARIFFS",
                            NormalizedName = "RENALCARE",
                            PublicationNo = "11111",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 518, DateTimeKind.Local).AddTicks(7122)
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 518, DateTimeKind.Local).AddTicks(7125),
                            Description = "Social Worker Tariffs",
                            IsDeleted = false,
                            Name = "Social Worker",
                            NormalizedDescription = "SOCIALWORKERTARIFFS",
                            NormalizedName = "SOCIALWORKER",
                            PublicationNo = "11111",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 518, DateTimeKind.Local).AddTicks(7125)
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "Administrator",
                            CreatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 518, DateTimeKind.Local).AddTicks(7125),
                            Description = "Wound Care Tariffs",
                            IsDeleted = false,
                            Name = "Wound Care",
                            NormalizedDescription = "WOUNDCARETARIFFS",
                            NormalizedName = "WOUNDCARE",
                            PublicationNo = "11111",
                            UpdatedBy = "Administrator",
                            UpdatedDate = new DateTime(2019, 8, 10, 11, 29, 20, 518, DateTimeKind.Local).AddTicks(7129)
                        });
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Tariffs.Tariff", b =>
                {
                    b.HasOne("MedicalEngineMicroService.Core.Models.Entities.Tariffs.MedicalItem", "MedicalItem")
                        .WithMany()
                        .HasForeignKey("MedicalItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MedicalEngineMicroService.Core.Models.Entities.Tariffs.TariffUnitCost", "TariffUnitCost")
                        .WithMany()
                        .HasForeignKey("TariffUnitCostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Tariffs.MedicalItem", b =>
                {
                    b.HasOne("MedicalEngineMicroService.Core.Models.Entities.Tariffs.MedicalItemType", "MedicalItemType")
                        .WithMany()
                        .HasForeignKey("MedicalItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Tariffs.MedicalItemPublication", b =>
                {
                    b.HasOne("MedicalEngineMicroService.Core.Models.Entities.Tariffs.MedicalItem", "MedicalItem")
                        .WithMany()
                        .HasForeignKey("MedicalItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PublicationType", "PublicationType")
                        .WithMany()
                        .HasForeignKey("PublicationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Tariffs.MedicalItemPublicationPeriod", b =>
                {
                    b.HasOne("MedicalEngineMicroService.Core.Models.Entities.Tariffs.MedicalItemPublication", "MedicalItemPublication")
                        .WithMany()
                        .HasForeignKey("MedicalItemPublicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Tariffs.Practitioner", b =>
                {
                    b.HasOne("MedicalEngineMicroService.Core.Models.Entities.Tariffs.PractitionerGroupType", "PractitionerGroupType")
                        .WithMany()
                        .HasForeignKey("PractitionerGroupTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Tariffs.PractitionerPractitionerType", b =>
                {
                    b.HasOne("MedicalEngineMicroService.Core.Models.Entities.Tariffs.Practitioner", "Practitioner")
                        .WithMany()
                        .HasForeignKey("PractitionerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MedicalEngineMicroService.Core.Models.Entities.Tariffs.PractitionerType", "PractitionerType")
                        .WithMany()
                        .HasForeignKey("PractitionerTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MedicalEngineMicroService.Core.Models.Entities.Users.ApplicationUserRole", b =>
                {
                    b.HasOne("MedicalEngineMicroService.Core.Models.Entities.Users.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MedicalEngineMicroService.Core.Models.Entities.Users.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MedicalEngineMicroService.Core.Models.Entities.Users.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MedicalEngineMicroService.Core.Models.Entities.Users.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MedicalEngineMicroService.Core.Models.Entities.Users.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MedicalEngineMicroService.Core.Models.Entities.Users.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
